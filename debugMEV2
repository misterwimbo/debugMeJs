// ==UserScript==
// @name         DebugJs
// @namespace    http://tampermonkey.net/
// @version      2024-08-05
// @description  try to take over the world!
// @author       wimbo
// @match        *://*/*
// @icon         https://www.google.com/s2/favicons?sz=64&domain=wrike.com
// @grant        none
// @run-at       document-start
// ==/UserScript==

(function() {
    // Patch addEventListener pour tracker les listeners
    function inject(fn) {
        const s = document.createElement('script');
        s.textContent = '(' + fn.toString() + ')();';
        (document.head || document.documentElement).appendChild(s);
        s.remove();
    }

    inject(function() {
        const _orig = EventTarget.prototype.addEventListener;
        EventTarget.prototype.addEventListener = function(type, listener, options) {
            if (!this._debugJsListeners) {
                Object.defineProperty(this, '_debugJsListeners', {
                    value: new Map(),
                    writable: false,
                    configurable: false,
                    enumerable: false
                });
            }
            const map = this._debugJsListeners;
            if (!map.has(type)) map.set(type, []);
            map.get(type).push(listener);
            return _orig.call(this, type, listener, options);
        };
    });

    // Attend que le DOM soit prêt
    function onReady(fn) {
        if (document.readyState === 'loading') {
            document.addEventListener('DOMContentLoaded', fn);
        } else {
            fn();
        }
    }

    onReady(function() {
        // Révélation des mots de passe au survol
        function initPasswordReveal() {
            document.querySelectorAll('input[type="password"]').forEach(input => {
                input.addEventListener('mouseenter', function() {
                    input.dataset._origType = input.type;
                    input.dataset._origColor = input.style.color;
                    input.dataset._origWeight = input.style.fontWeight;
                    input.type = 'text';
                    input.style.color = 'orange';
                    input.style.fontWeight = 'bold';
                });
                input.addEventListener('mouseleave', function() {
                    input.type = input.dataset._origType || 'password';
                    input.style.color = input.dataset._origColor || '';
                    input.style.fontWeight = input.dataset._origWeight || '';
                });
            });
        }

        // Zone d'infos en haut à gauche
        const topLeftCorner = document.createElement('div');
        topLeftCorner.id = 'topLeftCornerInfos';
        topLeftCorner.style.position = 'fixed';
        topLeftCorner.style.top = '45px';
        topLeftCorner.style.left = '20px';
        topLeftCorner.style.background = 'black';
        topLeftCorner.style.padding = '10px';
        topLeftCorner.style.zIndex = '1000';
        topLeftCorner.style.color = 'white';
        topLeftCorner.style.display = 'none';
        topLeftCorner.style.borderRadius = '5px';
        topLeftCorner.style.boxShadow = '2px 2px 5px rgba(0,0,0,0.1)';
        document.body.appendChild(topLeftCorner);

        function showEventInfo(eventType, element, haveEvent = false) {
            let info = '';
            if (haveEvent || eventType) {
                info += `<span style="color:red;">${eventType} :</span> ${element.getAttribute(eventType)}<br>`;
            }

            if (element._debugJsListeners && element._debugJsListeners.size > 0) {
                element._debugJsListeners.forEach((callbacks, type) => {
                    info += `<span class="dbg-listener" data-type="${type}" style="text-decoration:underline;cursor:pointer;color:orange;">${type}</span><br>`;
                });
            }

            if (element.id) info += `<span style="color:red;">id :</span> ${element.id}<br>`;
            if (element.name) info += `<span style="color:red;">name :</span> ${element.name}<br>`;

            topLeftCorner.innerHTML = info;
            topLeftCorner.style.display = 'block';

            const spans = topLeftCorner.querySelectorAll('.dbg-listener');
            spans.forEach(span => {
                let hideTimer;

                span.addEventListener('mouseenter', function(e) {
                    clearTimeout(hideTimer);

                    let tip = span._dbgTip;
                    if (!tip) {
                        tip = document.createElement('pre');
                        tip.className = 'dbg-tooltip';
                        const callbacks = element._debugJsListeners.get(span.dataset.type);
                        tip.textContent = callbacks.map(fn => fn.toString()).join('\n\n');
                        Object.assign(tip.style, {
                            position: 'fixed',
                            top: `${e.clientY + 10}px`,
                            left: `${e.clientX + 10}px`,
                            maxWidth: '400px',
                            maxHeight: '200px',
                            overflow: 'auto',
                            background: 'rgba(20,20,20,0.95)',
                            color: '#ECEFF4',
                            padding: '8px',
                            borderRadius: '4px',
                            zIndex: 99999,
                            fontFamily: "'Fira Code', monospace",
                            fontSize: '12px',
                            lineHeight: '1.4',
                            whiteSpace: 'pre-wrap',
                            tabSize: '2',
                            opacity: '0',
                            transition: 'opacity .15s ease-out'
                        });
                        document.body.appendChild(tip);
                        span._dbgTip = tip;
                        requestAnimationFrame(() => tip.style.opacity = '1');

                        tip.addEventListener('mouseenter', () => clearTimeout(hideTimer));
                        tip.addEventListener('mouseleave', scheduleHide);
                    }
                });

                function scheduleHide() {
                    clearTimeout(hideTimer);
                    hideTimer = setTimeout(() => {
                        if (span._dbgTip) {
                            span._dbgTip.remove();
                            delete span._dbgTip;
                        }
                    }, 300);
                }

                span.addEventListener('mouseleave', scheduleHide);
            });
        }

        // Appliquer à tous les inputs dès maintenant
        const inputsElements = document.querySelectorAll('input, select, textarea, button');
        const elementsWithEvents = document.querySelectorAll('[onclick], [onchange], [onkeyup], [onkeydown], [onkeypress], [ondblclick]');

        let timeoutId__;
        inputsElements.forEach(function (element) {
            element.addEventListener('mouseover', function () {
                timeoutId__ = setTimeout(function () { showEventInfo('', element, false); }, 400);
            });
            element.addEventListener('mouseout', function () {
                clearTimeout(timeoutId__);
            });
        });

        elementsWithEvents.forEach(function (element) {
            ['onclick', 'onchange', 'onkeyup', 'onkeydown', 'onkeypress', 'ondblclick'].forEach(function (eventType) {
                if (element.hasAttribute(eventType)) {
                    element.addEventListener('mouseover', function () {
                        timeoutId__ = setTimeout(function () {
                            showEventInfo(eventType, element);
                        }, 400);
                    });
                    element.addEventListener('mouseout', function () {
                        clearTimeout(timeoutId__);
                    });
                }
            });
        });

        initPasswordReveal();
    });
})();
